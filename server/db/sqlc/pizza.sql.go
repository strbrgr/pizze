// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: pizza.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createPizza = `-- name: CreatePizza :one
INSERT INTO pizzas (
  user_id, name, toppings
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, name, toppings, created_at
`

type CreatePizzaParams struct {
	UserID   int64    `json:"user_id"`
	Name     string   `json:"name"`
	Toppings []string `json:"toppings"`
}

func (q *Queries) CreatePizza(ctx context.Context, arg CreatePizzaParams) (Pizza, error) {
	row := q.db.QueryRowContext(ctx, createPizza, arg.UserID, arg.Name, pq.Array(arg.Toppings))
	var i Pizza
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		pq.Array(&i.Toppings),
		&i.CreatedAt,
	)
	return i, err
}

const getPizza = `-- name: GetPizza :one
SELECT id, user_id, name, toppings, created_at FROM pizzas
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPizza(ctx context.Context, id int64) (Pizza, error) {
	row := q.db.QueryRowContext(ctx, getPizza, id)
	var i Pizza
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		pq.Array(&i.Toppings),
		&i.CreatedAt,
	)
	return i, err
}

const listPizzas = `-- name: ListPizzas :many
SELECT id, user_id, name, toppings, created_at FROM pizzas
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListPizzasParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPizzas(ctx context.Context, arg ListPizzasParams) ([]Pizza, error) {
	rows, err := q.db.QueryContext(ctx, listPizzas, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pizza
	for rows.Next() {
		var i Pizza
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			pq.Array(&i.Toppings),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
